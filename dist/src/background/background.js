let keepAliveInterval;console.log("Attention Trainer background script loading...");const keepServiceWorkerAlive=()=>{keepAliveInterval&&clearInterval(keepAliveInterval),keepAliveInterval=setInterval(()=>{chrome.storage.local.get(["keepAlive"],()=>{chrome.runtime.lastError&&console.warn("Keep-alive check failed:",chrome.runtime.lastError.message)})},25e3)};chrome.runtime.onStartup.addListener(keepServiceWorkerAlive),chrome.runtime.onInstalled.addListener(keepServiceWorkerAlive),chrome.tabs.onActivated?.addListener&&chrome.tabs.onActivated.addListener(keepServiceWorkerAlive),keepServiceWorkerAlive();class AttentionTrainerBackground{constructor(){this.pendingStorageUpdates=new Map,this.storageUpdateTimeout=null,this.STORAGE_BATCH_DELAY=1e3,this.DATA_RETENTION_DAYS=90,this.setupEventListeners(),this.initializeStorage(),this.schedulePeriodicCleanup(),console.log("Attention Trainer background service initialized")}setupEventListeners(){chrome.runtime.onInstalled.addListener(()=>{this.initializeStorage()}),chrome.runtime.onMessage.addListener((e,t,a)=>(this.handleMessage(e,t,a),!0)),chrome.tabs.onUpdated.addListener((e,t,a)=>{"complete"===t.status&&a.url&&this.resetTabScrollData(e,a.url)})}async initializeStorage(){try{const e={isEnabled:!0,focusMode:"gentle",thresholds:{stage1:30,stage2:60,stage3:120,stage4:180},whitelist:[],blacklist:[],analytics:{dailyStats:{},weeklyStats:{},interventions:[]},gamification:{points:0,streak:0,achievements:[]}},t=await chrome.storage.local.get(Object.keys(e)),a={...e,...t};await chrome.storage.local.set(a),console.log("Storage initialized successfully")}catch(e){console.error("Failed to initialize storage:",e),chrome.storage.local.set({isEnabled:!0,focusMode:"gentle"})}}async handleMessage(e,t,a){try{switch(e.type){case"CONNECTION_TEST":a({success:!0,timestamp:Date.now(),backgroundVersion:"1.0.1"});break;case"HEALTH_CHECK":a({success:!0,health:await this.getHealthInfo(),timestamp:Date.now()});break;case"BEHAVIORAL_EVENT":await this.handleBehavioralEvent(e.data,t.tab),a({success:!0});break;case"INTERVENTION_TRIGGERED":await this.logIntervention(e.data,t.tab),a({success:!0});break;case"GET_SETTINGS":a(await chrome.storage.local.get());break;case"UPDATE_SETTINGS":await chrome.storage.local.set(e.data),a({success:!0});break;case"OPEN_DASHBOARD":await this.openDashboard(),a({success:!0});break;default:console.warn("Unknown message type:",e.type),a({success:!1,error:"Unknown message type"})}}catch(t){console.error("Error handling message:",e.type,t),a({success:!1,error:t.message})}}async handleScrollEvent(e,t){try{if(!t||!t.url)return;const a=await chrome.storage.local.get();if(!a.isEnabled)return;if(!e||"number"!=typeof e.scrollTime)return void console.warn("Invalid scroll event data:",e);const s=new URL(t.url).hostname;if(a.whitelist&&a.whitelist.includes(s))return;await this.updateScrollAnalytics(s,e);const n=this.calculateInterventionStage(e.scrollTime,a.thresholds||{});if(console.log(`Scroll event: ${s}, time: ${e.scrollTime}s, stage: ${n}`),n>0)try{console.log(`Triggering intervention stage ${n} for ${s}`),await chrome.tabs.sendMessage(t.id,{type:"TRIGGER_INTERVENTION",stage:n,focusMode:a.focusMode||"gentle"})}catch(e){console.warn("Failed to send intervention message:",e)}}catch(e){console.error("Error handling scroll event:",e)}}calculateInterventionStage(e,t){return e>=t.stage4?4:e>=t.stage3?3:e>=t.stage2?2:e>=t.stage1?1:0}async handleBehavioralEvent(e,t){try{if(!t||!t.url)return;const a=await chrome.storage.local.get();if(!a.isEnabled)return;const s=new URL(t.url).hostname;if(a.whitelist&&a.whitelist.includes(s))return;await this.updateBehavioralAnalytics(e),console.log(`Behavioral event: ${e.domain}, score: ${e.behaviorScore}, stage: ${e.interventionStage}`)}catch(e){console.error("Error handling behavioral event:",e)}}async updateBehavioralAnalytics(e){try{const t=`analytics_${e.domain}_${(new Date).toISOString().split("T")[0]}`;this.pendingStorageUpdates.has(t)||this.pendingStorageUpdates.set(t,{domain:e.domain,timeOnPage:0,behaviorScore:0,interventions:0,siteType:e.siteType||"general",flags:{},contentPieces:0,scrollPauses:0});const a=this.pendingStorageUpdates.get(t);a.timeOnPage=Math.max(a.timeOnPage,e.timeOnPage||0),a.behaviorScore=e.behaviorScore||0,a.siteType=e.siteType||"general",a.contentPieces=e.contentPieces||0,a.scrollPauses=e.scrollPauseCount||0,e.flags&&Object.keys(e.flags).forEach(t=>{a.flags[t]=e.flags[t]||0}),this.scheduleBatchedStorageUpdate()}catch(e){console.error("Error updating behavioral analytics:",e)}}async updateScrollAnalytics(e,t){try{const a=`analytics_${e}_${(new Date).toISOString().split("T")[0]}`;this.pendingStorageUpdates.has(a)||this.pendingStorageUpdates.set(a,{domain:e,scrollTime:0,scrollDistance:0,interventions:0});const s=this.pendingStorageUpdates.get(a);s.scrollTime+=t.deltaTime||0,s.scrollDistance+=t.scrollDistance||0,this.scheduleBatchedStorageUpdate()}catch(e){console.error("Error updating scroll analytics:",e)}}scheduleBatchedStorageUpdate(){this.storageUpdateTimeout||(this.storageUpdateTimeout=setTimeout(async()=>{await this.flushPendingStorageUpdates(),this.storageUpdateTimeout=null},this.STORAGE_BATCH_DELAY))}async flushPendingStorageUpdates(){if(0!==this.pendingStorageUpdates.size)try{const e=await chrome.storage.local.get(["analytics"]),t=(new Date).toISOString().split("T")[0];e.analytics||(e.analytics={dailyStats:{},interventions:[]}),e.analytics.dailyStats[t]||(e.analytics.dailyStats[t]={});for(const[a,s]of this.pendingStorageUpdates){const a=s.domain;e.analytics.dailyStats[t][a]||(e.analytics.dailyStats[t][a]={timeOnPage:0,behaviorScore:0,scrollTime:0,scrollDistance:0,interventions:0,siteType:"general",flags:{},contentPieces:0,scrollPauses:0}),void 0!==s.timeOnPage?(e.analytics.dailyStats[t][a].timeOnPage=s.timeOnPage,e.analytics.dailyStats[t][a].behaviorScore=s.behaviorScore||0,e.analytics.dailyStats[t][a].siteType=s.siteType||"general",e.analytics.dailyStats[t][a].flags=s.flags||{},e.analytics.dailyStats[t][a].contentPieces=s.contentPieces||0,e.analytics.dailyStats[t][a].scrollPauses=s.scrollPauses||0,e.analytics.dailyStats[t][a].interventions+=s.interventions):(e.analytics.dailyStats[t][a].scrollTime+=s.scrollTime||0,e.analytics.dailyStats[t][a].scrollDistance+=s.scrollDistance||0,e.analytics.dailyStats[t][a].interventions+=s.interventions)}await chrome.storage.local.set({analytics:e.analytics}),this.pendingStorageUpdates.clear()}catch(e){console.error("Error flushing storage updates:",e)}}async logIntervention(e,t){try{const a=await chrome.storage.local.get(["analytics"]),s=new URL(t.url).hostname,n=(new Date).toISOString().split("T")[0];a.analytics.interventions.push({domain:s,stage:e.stage,timestamp:Date.now(),date:n}),a.analytics.dailyStats[n]&&a.analytics.dailyStats[n][s]&&a.analytics.dailyStats[n][s].interventions++,await chrome.storage.local.set({analytics:a.analytics})}catch(e){console.error("Error logging intervention:",e)}}async resetTabScrollData(e,t){chrome.tabs.sendMessage(e,{type:"RESET_SCROLL_DATA"}).catch(()=>{})}async openDashboard(){try{const e=chrome.runtime.getURL("src/dashboard/dashboard.html");await chrome.tabs.create({url:e})}catch(e){console.error("Error opening dashboard:",e)}}schedulePeriodicCleanup(){setInterval(()=>{this.cleanupOldData()},864e5),setTimeout(()=>{this.cleanupOldData()},3e5)}async cleanupOldData(){try{const e=await chrome.storage.local.get(["analytics"]);if(!e.analytics)return;const t=new Date;t.setDate(t.getDate()-this.DATA_RETENTION_DAYS);const a=t.toISOString().split("T")[0];let s=!1;const n=e.analytics.dailyStats||{};for(const e in n)e<a&&(delete n[e],s=!0);const i=t.getTime(),r=e.analytics.interventions||[],o=r.filter(e=>e.timestamp>i);o.length!==r.length&&(e.analytics.interventions=o,s=!0),s&&(await chrome.storage.local.set({analytics:e.analytics}),console.log(`Cleaned up data older than ${this.DATA_RETENTION_DAYS} days`))}catch(e){console.error("Error during data cleanup:",e)}}async getHealthInfo(){try{const e=await chrome.storage.local.get();return{storageSize:JSON.stringify(e).length,pendingUpdates:this.pendingStorageUpdates.size,dataRetentionDays:this.DATA_RETENTION_DAYS,batchDelay:this.STORAGE_BATCH_DELAY,keepAliveActive:!!keepAliveInterval,lastCleanup:e.lastCleanup||"never",uptime:Date.now()-(this.startTime||Date.now())}}catch(e){return console.error("Error getting health info:",e),{error:e.message,timestamp:Date.now()}}}}const backgroundService=new AttentionTrainerBackground;console.log("Background service initialized:",!!backgroundService);